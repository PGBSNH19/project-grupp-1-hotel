<section>
    <div class="gradient-shader"></div>
    <div class="heading">
        <h2>Enjoyed your stay?<br /><span>Leave a review!</span></h2>
    </div>

    <div class="form">
        <EditForm Model="@Review" OnValidSubmit="(() => TryPost())">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="Grade">How would you grade your stay?</label>
                <InputSelect id="Grade" @bind-Value="@Review.Grade" class="form-control">
                    <option>1</option>
                    <option>2</option>
                    <option>3</option>
                    <option>4</option>
                    <option>5</option>
                </InputSelect>
                <small id="gradeHelp" class="form-text text-muted">Please grade your stay from 1 to 5</small>
                <ValidationMessage For="@(() => Review.Grade)" />
            </div>
            <div class="form-group">
                <label for="bookingNumber">Booking Number:</label>
                <InputText @bind-Value="@Review.BookingNumber" class="form-control" id="bookingNumber" placeholder="BookingNumber" />
                <small id="bookingNumberHelp" class="form-text text-muted">Booking Number is used to verify your stay</small>
                <ValidationMessage For="@(() => Review.BookingNumber)" />
            </div>
            <div class="form-group">
                <label for="description">Please enter a short description of your stay</label>
                <InputTextArea @bind-Value="@Review.Description" id="description" class="form-control" />
                <small id="descriptionHelp" class="form-text text-muted">This is not required but we would love to receive feedback from you</small>
                <ValidationMessage For="@(() => Review.Description)" />
            </div>
            <div class="form-group row">
                <label for="anonymous" class="col-6 col-form-label">Hide my name</label>
                <div class="col-6 hide-name">
                    <InputCheckbox @bind-Value="@Review.Anonymous" id="anonymous" />
                </div>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-success btn-block">Post review <i class="oi oi-envelope-closed"></i></button>
            </div>
        </EditForm>
    </div>
</section>

@code {
    [Inject] HttpClient Http { get; set; }
    [Inject] ToastService Toast { get; set; }
    [Inject] IConfiguration Config { get; set; }
    protected ReviewRequest Review;

    protected override void OnInitialized() => Review = new ReviewRequest(); 

    private async Task TryPost()
    {
        var result = await Http.PostAsJsonAsync<ReviewRequest>($"{Config["BaseApiUrl"]}api/v1.0/review", Review);
        if (result.IsSuccessStatusCode)
        {
            Toast.ShowToast("We have received your review. Thank you!", ToastLevel.Success);
            Review = new ReviewRequest();
            StateHasChanged();
        }
        else Toast.ShowToast($"Could not receive your review. Make sure Booking Number is correct, and there are no other reviews with the same number.", ToastLevel.Error);
    }
}
